/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   solver.c                                           :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: astripeb <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2019/06/29 10:49:52 by astripeb          #+#    #+#             */
/*   Updated: 2019/07/01 22:22:06 by astripeb         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "push_swap.h"

int			ft_quick_sort(t_stack **a, t_stack **b, t_vals *val, int len);

void		ft_solver(t_stack **stack)
{
	t_stack	*stack_a;
	t_stack	*stack_b;
	t_vals	*val;
	
	stack_b = NULL;
	stack_a = *stack;
	val = ft_gen_vals(stack_a);
	ft_quick_sort(&stack_a, &stack_b, val, val->len);
	ft_printstacks(stack_a, stack_b);
	*stack = stack_a;
}

int			ft_quick_sort(t_stack **s_a, t_stack **s_b, t_vals *val, int len)
{
	int	med;
	int	half;
	t_stack	*stack_a;

	stack_a = *s_a;
	half = 0;
	med = ft_get_mediana(stack_a, len);
	ft_printf("len = %d, med = %d\n", len, med);
	if (len == 1)
		return (0);
	ft_printstacks(stack_a, *s_b);
	while (len > 0)
	{
		if (stack_a->num >= med)
		{
			ft_push(&stack_a, s_b, val, "pb\n");
			++half;
		}
		else
			ft_rotate(&stack_a, val, "ra\n");
		--len;
	}
	ft_quick_sort(&stack_a, s_b, val, half);
	ft_quick_sort(s_b, &stack_a, val, val->len - half);
	*s_a = stack_a;
	return (0);
}

/*
int			ft_basic_case(t_stack **s_a, t_vals *val, int len)
{
	t_stack	*a;

	a = *s_a;
	if (len == 1)
		return (1);
	else if (len == 2)
	{
		if (a->num > a->next->num)
			ft_swap(a, val, "sa\n");
		return (1);
	}
	else if (len == 3)
	{
		if (a->num > a->next->num && a->next->num < a->next->next->num)
			ft_swap(a, val, "sa\n");
		else if (a->num > a->next->num && a->next->num > a->next->next->num)
		{
			ft_rotate(&a, val, "ra\n");
			ft_swap(a, val, "sa\n");
			ft_rev_rotate(&a, val, "rra\n");
		}
		else if (a->num > a->next->next->num &&
				a->next->num > a->next->next->num)
		{
			if (a->num < a->next->num)
				ft_swap(a, val, "sa\n");
			ft_rotate(&a, val, "ra\n");
			ft_swap(a, val, "sa\n");
			ft_rev_rotate(&a, val, "rra\n");
			ft_swap(a, val, "sa\n");
		}
		else if (a->num > a->next->num && a->next->num < a->next->next->num)
		{
			ft_swap(a, val, "sa\n");
			ft_rotate(&a, val, "ra\n");
			ft_swap(a, val, "sa\n");
			ft_rev_rotate(&a, val, "rra\n");
		}
	}
	*s_a = a;
	return (0);
}
*/
